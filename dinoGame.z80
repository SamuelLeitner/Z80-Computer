;PIO Definitionen
DDRA EQU 0x02 ;0010
DDRB EQU 0x03 ;0011

; DDRx setzen auf:
OUTPUT EQU 0x0F
INPUT EQU 0x4F
BITCONTROL EQU 0xCF

PORTA EQU 0x00 ;0000
PORTB EQU 0x01 ;0001



;LCD Definitionen
RS EQU 0x04 ; 1<<2
EN EQU 0x08 ; 1<<3

;Variablen
millis EQU 0x8000
prevMillis1 EQU 0x8002
prevMillis2 EQU 0x8004
prevMillis3 EQU 0x8006

playerY EQU 0x8020
playerX EQU 0x8021
sprite EQU 0x8022

blockIndex EQU 0x8030
blockArray EQU 0x8032  ;Block in Speicher: xxll,xxll,xxll... (xx = coordx, ll = length)

ramRandomIndex EQU 0x8050
ramFrom EQU 0x00
ramTo EQU 0xFF

ORG 0x0000
LD SP, 0xFFFF

LD A, 0xD3
LD (playerY), A
;Init Variablen
LD A, 0
LD (sprite), A
LD (blockIndex), A
LD A, 0xFF
LD HL, blockArray
LD (HL), A
INC HL
LD (HL), A
INC HL
LD (HL), A
INC HL
LD (HL), A

LD A, 0x00
LD HL, millis
LD (HL), A
INC HL
LD (HL), A
LD HL, prevMillis1
LD (HL), A
INC HL
LD (HL), A
LD HL, prevMillis2
LD (HL), A
INC HL
LD (HL), A
LD HL, prevMillis3
LD (HL), A
INC HL
LD (HL), A

LD A, 0x52
LD HL, ramRandomIndex
LD (HL), A
INC HL
LD A, 0x80
LD (HL), A


Start:
LD A, BITCONTROL    ; Inizialisierung des PIOs im Bitcontroll Modus
OUT (DDRA),A

LD A, 0x03          ;QQQQ QQII
OUT (DDRA), A


; ~1 Sekunde , Inizialisierung Delay
LD A, 250
CALL DELAY
LD A, 250
CALL DELAY
LD A, 250
CALL DELAY
LD A, 250
CALL DELAY


;Inizialisierung LCD 4 Bit Modus
LD B, 0x02          ;Cursor zu Home
CALL LCD_DATA
LD B, 0x28          ;4 Bit Modus, 2 Zeilen, 5x8 Buchstaben
CALL LCD_DATA
LD B, 0x0C          ;Display ein, Cursor blinkt
CALL LCD_DATA
LD B, 0x01          ;Clear
CALL LCD_DATA

LD A, 250
CALL DELAY


;Schreiben von Chars zum Display in HEX, 'H' = 0x48

LD B, 'J'
CALL LCD_CHAR
LD B, 'u'
CALL LCD_CHAR
LD B, 'm'
CALL LCD_CHAR
LD B, 'p'
CALL LCD_CHAR
LD B, '-'
CALL LCD_CHAR

LD B, 'R'
CALL LCD_CHAR
LD B, 'u'
CALL LCD_CHAR
LD B, 'n'
CALL LCD_CHAR

;GCRAM Adresse setzen
LD B,  0x40         ;Pos 0
;Zeichen in HL laden
LD HL, playerW1   ;Addresse
CALL LCD_GCRAM
;GCRAM Adresse setzen
LD B,  0x48         ;Pos 0
;Zeichen in HL laden
LD HL, playerW2   ;Addresse
CALL LCD_GCRAM
;GCRAM Adresse setzen
LD B,  0x50         ;Pos 0
;Zeichen in HL laden
LD HL, sadSmile   ;Addresse
CALL LCD_GCRAM






MAIN_LOOP:
;LD B, 0x01
;CALL LCD_DATA


IN A, (PORTA)
AND 0x01

CP 0x01
JP NZ, noJump
LD A, 0x93
LD (playerY), A


noJump:
;######################################
LD A, (blockIndex)
LD HL, blockArray
LD B, 0
LD C, A             ;offset
ADD HL, BC    

LD A, (HL)
CP 0xFF
JP NZ, return3


LD HL, (prevMillis3)
LD BC, HL
LD HL, (millis)
; Save L in A to subtract C
LD   A, L        ; A = L
SUB  C           ; A = L - C
LD   L, A        ; Store result back in L
LD   A, H
SBC  A, B        ; A = H - B - CY
LD   H, A
PUSH HL
;#########
LD HL, (ramRandomIndex)
INC HL
LD A, (HL)

POP HL
LD E, A     ; ????
AND 0x07
LD D, A
LD   A, L
SUB  E             ; L - E
LD   A, H
SBC  A, D          ; H - D - carry from previous
JP   NC, IsGreaterOrEqual3   ; HL >= 1000
return3:



;######################################
LD HL, (prevMillis2)
LD BC, HL
LD HL, (millis)
; Save L in A to subtract C
LD   A, L        ; A = L
SUB  C           ; A = L - C
LD   L, A        ; Store result back in L
LD   A, H
SBC  A, B        ; A = H - B - CY
LD   H, A
;#########
LD   DE, 0x00C8     ; 500 Millisekunden
LD   A, L
SUB  E             ; L - E
LD   A, H
SBC  A, D          ; H - D - carry from previous
JP   NC, IsGreaterOrEqual2   ; HL >= 1000
return2:



;######################################
LD HL, (prevMillis1)
LD BC, HL
LD HL, (millis)
; Save L in A to subtract C
LD   A, L        ; A = L
SUB  C           ; A = L - C
LD   L, A        ; Store result back in L
LD   A, H
SBC  A, B        ; A = H - B - CY
LD   H, A
;#########
LD   DE, 0x64     ; 100 Millisekunden
LD   A, L
SUB  E             ; L - E
LD   A, H
SBC  A, D          ; H - D - carry from previous
JP   NC, IsGreaterOrEqual1   ; HL >= 1000
return1:

JP skip            









;######################################
IsGreaterOrEqual1:
PUSH HL
LD B, 0x93
CALL LCD_DATA
LD B, 0x20
CALL LCD_CHAR
LD B, 0xD3
CALL LCD_DATA
LD B, 0x20
CALL LCD_CHAR

LD HL, (millis)
LD (prevMillis1), HL
LD A, (playerY)
LD B, A
CALL LCD_DATA

LD A, (sprite)
XOR 1
;Sprite auf LCD Schreiben
LD (sprite), A
LD A, (sprite)
LD B, A
CALL LCD_CHAR

LD A, 0xD3
LD (playerY), A

POP HL
JP return1






;######################################
IsGreaterOrEqual2:
PUSH HL
LD HL, (millis)
LD (prevMillis2), HL
; foreatch Index in Block Array
;######### Clear all blocks #########
LD A, 0xDF
clear:
LD B, A
CALL LCD_DATA
LD B, 0x20
CALL LCD_CHAR
DEC A
CP 0xCF
JP NZ, clear


;######### Move all blocks #########
LD A, 0
forMoveBlock:
LD HL, blockArray
LD B, 0
LD C, A             ;offset
ADD HL, BC          ;addresse + offset

EX AF, AF'
LD A, (HL)
CP 0xFF
JP Z, dontMove

DEC A
LD C, A
CP 0xCF                                                         ;Ende der Zeile
JP Z, resetPos
LD (HL), A
LD B, A
CALL LCD_DATA
LD B, 0xFF
CALL LCD_CHAR

;######### Check collisions #########
LD A, (playerY)
CP C
JP Z, death
JP dontMove

resetPos:
LD (HL), 0xFF

dontMove:
EX AF, AF'
INC A
CP 0x04
JP NZ, forMoveBlock

POP HL
JP return2




;######################################
IsGreaterOrEqual3:
PUSH HL
LD HL, (millis)
LD (prevMillis3), HL

LD A, (blockIndex)
LD HL, blockArray
LD B, 0
LD C, A             ;offset
ADD HL, BC    
LD (HL), 0xDF

INC A
CP 0x04
JP NZ, continue
LD A, 0x00
continue:
LD (blockIndex), A

LD HL, (ramRandomIndex)
LD  DE, 0x0064     ; 
LD  A, L
SUB E             ; L - E
LD A, H
SBC A, D          ; H - D - carry from previous
JP C, skipResetRandom   ; HL >= 1000
LD A, 0x52
LD HL, ramRandomIndex
LD (HL), A
INC HL
LD A, 0x80
LD (HL), A

skipResetRandom:
INC HL
LD (ramRandomIndex), HL
POP HL
JP return3





skip:
LD HL, (millis)
INC HL
LD (millis), HL

LD A, 1
CALL DELAY

JP skip_death
death:
LD B, 0x01
CALL LCD_DATA
LD B, 0x02
CALL LCD_DATA

LD B, 'D'
CALL LCD_CHAR
LD B, 'e'
CALL LCD_CHAR
LD B, 'a'
CALL LCD_CHAR
LD B, 't'
CALL LCD_CHAR
LD B, 'h'
CALL LCD_CHAR
LD B, 0x02
CALL LCD_CHAR


death_loop:
IN A, (PORTA)
AND 0x01
CP 0x01
JP NZ, death_loop

LD B, 0x01
CALL LCD_DATA
skip_death:

JP MAIN_LOOP










; ####################### LCD GCRAM ######################
LCD_GCRAM:
;Custom Zeichen schreiben:
PUSH AF
PUSH BC
PUSH HL

LD A, 0
CALL LCD_DATA

custom:
PUSH AF
LD DE, HL

;Lade byte auf index
LD B, 0
LD C, A             ;offset

ADD HL, BC          ;addresse + offset
;Datenreihe Schreiben
LD B, (HL)
CALL LCD_CHAR

LD HL, DE
POP AF
INC A
CP 8
JP NZ, custom

POP HL
POP BC
POP AF

RET



; ####################### LCD DATA ######################
LCD_DATA:
PUSH AF
PUSH BC 

LD A, 0xF0
AND B
OUT (PORTA), A
; 0xCA & 0xF0 -> 0xC0

LD C, EN
OR C
OUT (PORTA), A
; 0xC0 | 0x08 -> 0xC8

LD A, 3
CALL DELAY


LD C, A
LD A, EN
CPL
AND C
OUT (PORTA), A
; 0xC8 & CPL(0x08) -> 0xC0

;#########################

LD A, 0x0F
AND B
RLCA
RLCA
RLCA
RLCA

OUT (PORTA), A
; (0xCA & 0x0F) << 4 -> 0xA0

LD C, EN
OR C
OUT (PORTA), A
; 0xA0 | 0x08 -> 0xA8

LD A, 3
CALL DELAY

LD C, A
LD A, EN
CPL
AND C
OUT (PORTA), A
; 0xA8 & CPL(0x08) -> 0xA0

LD A, 3
CALL DELAY
POP BC
POP AF
RET





; ####################### LCD CHAR ######################
LCD_CHAR:
PUSH AF
PUSH BC

LD A, 0xF0
AND B
LD C, RS
OR C
OUT (PORTA), A
; 0xCA & 0xF0 -> 0xC0
; 0xC0 | 0x04 -> 0xC4

LD C, EN
OR C
OUT (PORTA), A
; 0xC4 | 0x08 -> 0xCC

LD A, 3
CALL DELAY

LD C, A
LD A, EN
CPL
AND C
OUT (PORTA), A
; 0xCC & CPL(0x08) -> 0xC4

;#########################

LD A, 0x0F
AND B
RLCA
RLCA
RLCA
RLCA
LD C, RS
OR C

OUT (PORTA), A
; (0xCA & 0x0F) << 4 -> 0xA0
; 0xA0 | 0x04 -> 0xA4

LD C, EN
OR C
OUT (PORTA), A
; 0xA0 | 0x0C -> 0xAC

LD A, 3
CALL DELAY

LD C, A
LD A, EN
CPL
AND C
OUT (PORTA), A
; 0xAC & CPL(0x08) -> 0xA4

LD A, 3
CALL DELAY
POP BC
POP AF
RET






; #######################  DELAY  ######################
DELAY:
PUSH AF
PUSH BC

loop:
    LD B, A
    LD A, 255  ; ca 1ms

loop_2:
    DEC A       ; 4 cycles
    CP 0        ; 7 cycles
    JR NZ, loop_2 ; 10 cycles 

    LD A, B
    DEC A       ; 4 cycles
    CP 0        ; 7 cycles
    JR NZ, loop ; 10 cycles 


POP BC
POP AF
RET


playerW1: .byte 0x0C,0x0C,0x00,0x0E,0x1C,0x0C,0x1A,0x13
playerW2: .byte 0x0C,0x0C,0x00,0x1C,0x0E,0x0C,0x0C,0x0A
playerJump: .byte 0x0C,0x0C,0x00,0x0F,0x1C,0x0D,0x1F,0x10
sadSmile: .byte  0x00,0x0A,0x0A,0x00,0x00,0x0E,0x11,0x00
;CustomChar1: .byte 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF

